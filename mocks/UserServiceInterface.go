// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	models "myapp/models"

	mock "github.com/stretchr/testify/mock"
)

// UserServiceInterface is an autogenerated mock type for the UserServiceInterface type
type UserServiceInterface struct {
	mock.Mock
}

// DeleteUser provides a mock function with given fields: req
func (_m *UserServiceInterface) DeleteUser(req models.RequestID) (int64, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(models.RequestID) (int64, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(models.RequestID) int64); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(models.RequestID) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUserByEmail provides a mock function with given fields: req
func (_m *UserServiceInterface) FindUserByEmail(req models.UserFindUserByEmailRequest) (models.UserModels, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for FindUserByEmail")
	}

	var r0 models.UserModels
	var r1 error
	if rf, ok := ret.Get(0).(func(models.UserFindUserByEmailRequest) (models.UserModels, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(models.UserFindUserByEmailRequest) models.UserModels); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(models.UserModels)
	}

	if rf, ok := ret.Get(1).(func(models.UserFindUserByEmailRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUserByID provides a mock function with given fields: req
func (_m *UserServiceInterface) FindUserByID(req models.RequestID) (models.UserModels, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for FindUserByID")
	}

	var r0 models.UserModels
	var r1 error
	if rf, ok := ret.Get(0).(func(models.RequestID) (models.UserModels, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(models.RequestID) models.UserModels); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(models.UserModels)
	}

	if rf, ok := ret.Get(1).(func(models.RequestID) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: req
func (_m *UserServiceInterface) Login(req models.UserLoginRequest) (models.UserLoginResponse, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 models.UserLoginResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(models.UserLoginRequest) (models.UserLoginResponse, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(models.UserLoginRequest) models.UserLoginResponse); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(models.UserLoginResponse)
	}

	if rf, ok := ret.Get(1).(func(models.UserLoginRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: req
func (_m *UserServiceInterface) Register(req models.UserRegisterRequest) (int64, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(models.UserRegisterRequest) (int64, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(models.UserRegisterRequest) int64); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(models.UserRegisterRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserServiceInterface creates a new instance of UserServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserServiceInterface {
	mock := &UserServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
