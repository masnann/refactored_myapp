// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	models "myapp/models"

	mock "github.com/stretchr/testify/mock"
)

// UserRepositoryInterface is an autogenerated mock type for the UserRepositoryInterface type
type UserRepositoryInterface struct {
	mock.Mock
}

// DeleteUser provides a mock function with given fields: userID
func (_m *UserRepositoryInterface) DeleteUser(userID int64) (int64, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (int64, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int64) int64); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUserByEmail provides a mock function with given fields: email
func (_m *UserRepositoryInterface) FindUserByEmail(email string) (models.UserModels, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for FindUserByEmail")
	}

	var r0 models.UserModels
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.UserModels, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) models.UserModels); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(models.UserModels)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUserByID provides a mock function with given fields: id
func (_m *UserRepositoryInterface) FindUserByID(id int64) (models.UserModels, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindUserByID")
	}

	var r0 models.UserModels
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (models.UserModels, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) models.UserModels); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.UserModels)
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: req
func (_m *UserRepositoryInterface) Register(req models.UserModels) (int64, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(models.UserModels) (int64, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(models.UserModels) int64); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(models.UserModels) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserRepositoryInterface creates a new instance of UserRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepositoryInterface {
	mock := &UserRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
